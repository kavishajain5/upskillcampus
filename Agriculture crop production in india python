{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "version": "3.6.4",
      "file_extension": ".py",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "name": "python",
      "mimetype": "text/x-python"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "sourceId": 3333,
          "sourceType": "datasetVersion",
          "datasetId": 1935
        }
      ],
      "dockerImageVersionId": 30513,
      "isInternetEnabled": false,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "name": "project 3",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kavishajain5/upskillcampus/blob/main/Agriculture%20crop%20production%20in%20india%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "\n",
        "import os\n",
        "import sys\n",
        "from tempfile import NamedTemporaryFile\n",
        "from urllib.request import urlopen\n",
        "from urllib.parse import unquote, urlparse\n",
        "from urllib.error import HTTPError\n",
        "from zipfile import ZipFile\n",
        "import tarfile\n",
        "import shutil\n",
        "\n",
        "CHUNK_SIZE = 40960\n",
        "DATA_SOURCE_MAPPING = 'agricuture-crops-production-in-india:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1935%2F3333%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240307%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240307T052410Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Dae101bb35d54e93b3d3b89fa3a9f97db5cc08d17b8542bd00d97c2a8a843520e11938e1c0128959d8c98e0e6a38775bc6e50aadf52ac3c6fde3af40c134a137da4c9478b03a78deb773d3a08473315c0e0a445029c8dae8d9b8449e5938557133a93e99aa4fe6c2bc73463db6f8f1e6f8c1649b6fd1ae02dc01f227f85360538d921caa9961afb8671df21643b38d42cccfbe471baff9a4d674774b367d7351e28fb2d6df025b267d8cc144ecd3ff1ed439468933c09bbdf24d6d246654290dd2a7fb8b6aa9c5797a32be5e575f1521a38f0fa5e0e3c24267d4cca45b0a4e3a96e46b8ad97b913e451da0d2c87357f2e14a23dce63294d553c803e1394408817'\n",
        "\n",
        "KAGGLE_INPUT_PATH='/kaggle/input'\n",
        "KAGGLE_WORKING_PATH='/kaggle/working'\n",
        "KAGGLE_SYMLINK='kaggle'\n",
        "\n",
        "!umount /kaggle/input/ 2> /dev/null\n",
        "shutil.rmtree('/kaggle/input', ignore_errors=True)\n",
        "os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n",
        "os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n",
        "\n",
        "try:\n",
        "  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "try:\n",
        "  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "\n",
        "for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n",
        "    directory, download_url_encoded = data_source_mapping.split(':')\n",
        "    download_url = unquote(download_url_encoded)\n",
        "    filename = urlparse(download_url).path\n",
        "    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n",
        "    try:\n",
        "        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n",
        "            total_length = fileres.headers['content-length']\n",
        "            print(f'Downloading {directory}, {total_length} bytes compressed')\n",
        "            dl = 0\n",
        "            data = fileres.read(CHUNK_SIZE)\n",
        "            while len(data) > 0:\n",
        "                dl += len(data)\n",
        "                tfile.write(data)\n",
        "                done = int(50 * dl / int(total_length))\n",
        "                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n",
        "                sys.stdout.flush()\n",
        "                data = fileres.read(CHUNK_SIZE)\n",
        "            if filename.endswith('.zip'):\n",
        "              with ZipFile(tfile) as zfile:\n",
        "                zfile.extractall(destination_path)\n",
        "            else:\n",
        "              with tarfile.open(tfile.name) as tarfile:\n",
        "                tarfile.extractall(destination_path)\n",
        "            print(f'\\nDownloaded and uncompressed: {directory}')\n",
        "    except HTTPError as e:\n",
        "        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n",
        "        continue\n",
        "    except OSError as e:\n",
        "        print(f'Failed to load {download_url} to path {destination_path}')\n",
        "        continue\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "id": "PFiXk2qTeKc1"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"display:fill;\n",
        "            border-radius:15px;\n",
        "            background-color:#00FF00;\n",
        "            font-size:210%;\n",
        "            font-family:cursive;\n",
        "            letter-spacing:0.5px;\n",
        "            padding:10px;\n",
        "            color:white;\n",
        "            border-style: solid;\n",
        "            border-color: black;\n",
        "            text-align:center;\">\n",
        "<b>\n",
        "üå± Crop Yield Variation across States üçé üåæ üåø</b>\n",
        "</div>"
      ],
      "metadata": {
        "id": "vyLb9bVceKc4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display:fill;border-radius:5px;background-color:#1f77b4;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b>1 |</b> Introduction</p></div>\n",
        "\n",
        "India, a prominent agricultural powerhouse, holds a significant position as the second largest producer of key food staples such as wheat and rice on a global scale. The country has also emerged as a leading producer of various dry fruits, essential textile raw materials, root crops, tuber crops, pulses, farmed fish, eggs, coconut, sugarcane, and a wide range of vegetables. With a rich history dating back to 9000 BCE, Indian agriculture has evolved through early cultivation practices, crop and animal domestication, and the development of advanced agricultural techniques. Benefiting from the unique double monsoon system, which brings two harvests in a year, agricultural communities flourished and settled across the land. India proudly holds the title of being the world's largest producer of milk, pulses, and jute, while also ranking second in the production of rice, wheat, sugarcane, groundnut, vegetables, fruits, and cotton. This remarkable agricultural landscape showcases India's commitment to sustainable farming practices and its significant contribution to global food production."
      ],
      "metadata": {
        "id": "rsovphWkeKc8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"color: black;\n",
        "            display: inline-block;\n",
        "            border-radius: 5px;\n",
        "            background-color: #00FF00;\n",
        "            font-size: 130%;\n",
        "            font-family: cursive;\n",
        "            letter-spacing: 0.5px;\n",
        "            padding: 10px;\">\n",
        "What is the production of agriculture in India?\n",
        "</div>\n",
        "\n",
        "[Agriculture in India - Wikipedia](https://en.wikipedia.org/wiki/Agriculture_in_India#:~:text=India%20is%20the%20second%20largest,coconut%2C%20sugarcane%20and%20numerous%20vegetables.)\n",
        "\n",
        "India is the second largest producer of wheat and rice, the world's major food staples. India is currently the world's second largest producer of several dry fruits, agriculture-based textile raw materials, roots and tuber crops, pulses, farmed fish, eggs, coconut, sugarcane and numerous vegetables."
      ],
      "metadata": {
        "id": "bOQxTRCQeKc9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"color: black;\n",
        "            display: inline-block;\n",
        "            border-radius: 5px;\n",
        "            background-color: #00FF00;\n",
        "            font-size: 130%;\n",
        "            font-family: cursive;\n",
        "            letter-spacing: 0.5px;\n",
        "            padding: 10px;\">\n",
        "What are the major agricultural production in India?\n",
        "</div>\n",
        "\n",
        "\n",
        "[Reference](https://www.fao.org/india/fao-in-india/india-at-a-glance/en/#:~:text=India%20is%20the%20world's%20largest,poultry%2C%20livestock%20and%20plantation%20crops.)\n",
        "\n",
        "India is the world's largest producer of milk, pulses and jute, and ranks as the second largest producer of rice, wheat, sugarcane, groundnut, vegetables, fruit and cotton. It is also one of the leading producers of spices, fish, poultry, livestock and plantation crops."
      ],
      "metadata": {
        "id": "faCjTAvDeKc9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"color: black;\n",
        "            display: inline-block;\n",
        "            border-radius: 5px;\n",
        "            background-color: #00FF00;\n",
        "            font-size: 130%;\n",
        "            font-family: cursive;\n",
        "            letter-spacing: 0.5px;\n",
        "            padding: 10px;\">\n",
        "What is the history of crop production in India?\n",
        "</div>\n",
        "\n",
        "[Reference](https://www.igntu.ac.in/eContent/IGNTU-eContent-375577792959-BA-AIHC-6-DrJanardhanaB-ScienceandTechnologyinAncientIndia-4.pdf)\n",
        "\n",
        "Indian agriculture began by 9000 BCE as a result of early cultivation of plants, and domestication of crops and animals. Settled life soon followed with implements and techniques being developed for agriculture. Double monsoons led to two harvests being reaped in one year."
      ],
      "metadata": {
        "id": "htNeGgEceKc-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"color: black;\n",
        "            display: inline-block;\n",
        "            border-radius: 5px;\n",
        "            background-color: #00FF00;\n",
        "            font-size: 130%;\n",
        "            font-family: cursive;\n",
        "            letter-spacing: 0.5px;\n",
        "            padding: 10px;\">\n",
        "Is India the largest producer of agricultural products?\n",
        "</div>\n",
        "\n",
        "[Reference](https://testbook.com/question-answer/india-is-the-worlds-largest-producer-of-_____--61d6976e3c1eb88e230a0764#:~:text=India%20is%20the%20world's%20largest%20producer%20of%20milk%2C%20pulses%20and,%2C%20vegetables%2C%20fruit%20and%20cotton.)\n",
        "\n",
        "India is the world's largest producer of milk, pulses and Jute. India ranks as the second-largest producer of rice, wheat, sugarcane, groundnut, vegetables, fruit and cotton.Jun 7, 2023"
      ],
      "metadata": {
        "id": "n_fUA_BgeKc_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"color: black;\n",
        "            display: inline-block;\n",
        "            border-radius: 5px;\n",
        "            background-color: #00FF00;\n",
        "            font-size: 130%;\n",
        "            font-family: cursive;\n",
        "            letter-spacing: 0.5px;\n",
        "            padding: 10px;\">\n",
        "Where are most crops grown in India?\n",
        "</div>\n",
        "\n",
        "[Reference](https://www.tractorjunction.com/blog/top-10-agriculture-states-in-india/#:~:text=Punjab%20is%20the%20most%20fertile,used%20to%20produce%20food%20grain.)\n",
        "\n",
        "Punjab is the most fertile state on earth. It is best to produce wheat, sugarcane, rice, vegetables, and fruits in Punjab. Punjab's other name is the Granary of India and India's breadbasket. Around 93% of the total productive land used to produce food grain.Dec 9, 2021"
      ],
      "metadata": {
        "id": "ZXBlMmeheKc_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " # <div style=\"color:white;display:inline-block;border-radius:5px;background-color:#1f77b4;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Dataset Discription:</p></div>\n",
        "\n",
        "\n",
        "|Dataset Listing of attributes:|  |\n",
        "|---------------|:--------------------|\n",
        "|crop:|string, crop name|\n",
        "|Variety:|string,crop subsidary name|\n",
        "|state:| string,Crops Cultivation/production Place|\n",
        "|Quantity:|Integer,no of Quintals/Hectars|\n",
        "|production:|Integer,no of years Production|\n",
        "|Season:|DateTime,medium(no of days),long(no of days)|\n",
        "|Unit:|String , Tons|\n",
        "|Cost:|Integer, cost of cutivation and Production|"
      ],
      "metadata": {
        "id": "OasUCTmaeKdA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"color: black;\n",
        "            display: inline-block;\n",
        "            border-radius: 5px;\n",
        "            background-color: #ff7f0e;\n",
        "            font-size: 130%;\n",
        "            font-family: cursive;\n",
        "            letter-spacing: 0.5px;\n",
        "            padding: 10px;\">\n",
        "The brief overview of the crops and their growth in India:\n",
        "\n",
        "</div>\n",
        "\n",
        "1. **ARHAR (Pigeon Pea):** Arhar is a pulse crop and a major source of protein in India. It is primarily grown in central and western regions of the country. Arhar is known for its tolerance to drought conditions and is often intercropped with other crops.\n",
        "\n",
        "2. **COTTON:** Cotton is a crucial cash crop in India and a major contributor to the country's textile industry. It is predominantly cultivated in the states of Gujarat, Maharashtra, and Andhra Pradesh. India is one of the largest producers and exporters of cotton in the world.\n",
        "\n",
        "3. **GRAM (Chickpea):** Gram is a pulse crop commonly grown in India. It is cultivated in various states across the country, including Madhya Pradesh, Rajasthan, and Uttar Pradesh. Gram is an essential ingredient in many Indian dishes and is known for its nutritional value.\n",
        "\n",
        "4. **GROUNDNUT (Peanut):** Groundnut is an oilseed crop grown in several states of India, including Gujarat, Andhra Pradesh, and Tamil Nadu. It is used for oil extraction, as a snack, and as an ingredient in various food products. India is one of the leading producers of groundnut globally.\n",
        "\n",
        "5. **MAIZE (Corn):** Maize is a cereal crop cultivated across different regions of India, particularly in states like Karnataka, Andhra Pradesh, and Madhya Pradesh. It is primarily grown for animal feed, human consumption, and as a raw material for various industries.\n",
        "\n",
        "6. **MOONG (Mung Bean):** Moong is a pulse crop widely cultivated in India, especially in states like Rajasthan, Maharashtra, and Uttar Pradesh. It is known for its nutritional benefits and is a common ingredient in Indian cuisine.\n",
        "\n",
        "7. **PADDY (Rice):** Paddy, or rice, is a staple food crop in India and a significant part of the country's agriculture. It is grown in states like West Bengal, Uttar Pradesh, and Punjab. India is one of the largest producers and consumers of rice globally.\n",
        "\n",
        "8. **RAPESEED AND MUSTARD:** Rapeseed and mustard are oilseed crops grown in various regions of India, including Rajasthan, Uttar Pradesh, and Madhya Pradesh. They are used for oil extraction and are important ingredients in Indian cooking.\n",
        "\n",
        "9. **SUGARCANE:** Sugarcane is a cash crop extensively cultivated in India, particularly in states like Uttar Pradesh, Maharashtra, and Karnataka. It is primarily grown for sugar production and is an important commodity in the country's agro-industry.\n",
        "\n",
        "10. **WHEAT:** Wheat is a major cereal crop in India, primarily grown in states like Punjab, Haryana, and Uttar Pradesh. It serves as a staple food and is the second most important cereal crop after rice in terms of production. India is among the top wheat-producing countries globally.\n",
        "\n",
        "These crops have diverse growth patterns, varying cultivation practices, and contribute significantly to India's agricultural sector, food security, and overall economy."
      ],
      "metadata": {
        "id": "1T8rrFMqeKdA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display:fill;border-radius:5px;background-color:#1f77b4;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b>2 |</b> Import the required libraries</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "LUugR8_peKdC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "plt.rcParams['figure.figsize'] = (12,6)\n",
        "plt.style.use('fivethirtyeight')\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:02.019238Z",
          "iopub.execute_input": "2023-07-10T05:25:02.020908Z",
          "iopub.status.idle": "2023-07-10T05:25:03.889414Z",
          "shell.execute_reply.started": "2023-07-10T05:25:02.020789Z",
          "shell.execute_reply": "2023-07-10T05:25:03.888195Z"
        },
        "trusted": true,
        "id": "JBzGQgYkeKdC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display:fill;border-radius:5px;background-color:#1f77b4;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b>3 |</b> Load the dataset</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "--9I_hDdeKdD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "print(os.listdir('/kaggle/input/agricuture-crops-production-in-india/'))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:10.333273Z",
          "iopub.execute_input": "2023-07-10T05:25:10.333708Z",
          "iopub.status.idle": "2023-07-10T05:25:10.349675Z",
          "shell.execute_reply.started": "2023-07-10T05:25:10.333674Z",
          "shell.execute_reply": "2023-07-10T05:25:10.348366Z"
        },
        "trusted": true,
        "id": "m5PN8JofeKdE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Load the data using pandas read functions\n",
        "data1 = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/datafile (1).csv')\n",
        "data2 = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/datafile (2).csv')\n",
        "data3 = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/datafile (3).csv')\n",
        "datafile = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/datafile.csv')\n",
        "produce = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/produce.csv')"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:16.059796Z",
          "iopub.execute_input": "2023-07-10T05:25:16.060236Z",
          "iopub.status.idle": "2023-07-10T05:25:16.107999Z",
          "shell.execute_reply.started": "2023-07-10T05:25:16.060204Z",
          "shell.execute_reply": "2023-07-10T05:25:16.106998Z"
        },
        "trusted": true,
        "id": "fcruvQs1eKdE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1 = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/datafile (1).csv')\n",
        "\n",
        "data1 = data1.rename(columns={\n",
        "    'Crop': 'Crop',\n",
        "    'State': 'State',\n",
        "    'Cost of Cultivation (`/Hectare) A2+FL': 'Cost_A2_FL',\n",
        "    'Cost of Cultivation (`/Hectare) C2': 'Cost_C2',\n",
        "    'Cost of Production (`/Quintal) C2': 'Cost_Production',\n",
        "    'Yield (Quintal/ Hectare) ': 'Yield'\n",
        "})\n",
        "\n",
        "data1.head().style.set_properties(**{'background-color':'royalblue','color':'black','border-color':'#8b8c8c'})\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:21.070718Z",
          "iopub.execute_input": "2023-07-10T05:25:21.071182Z",
          "iopub.status.idle": "2023-07-10T05:25:21.183678Z",
          "shell.execute_reply.started": "2023-07-10T05:25:21.071148Z",
          "shell.execute_reply": "2023-07-10T05:25:21.182539Z"
        },
        "trusted": true,
        "id": "8HibfLCleKdF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display:fill;border-radius:5px;background-color:#1f77b4;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b>4 |</b> Exploratory Data Analysis</p></div>\n",
        "\n",
        "* Perform exploratory data analysis on the dataset, including visualizations and statistical analysis\n",
        "* Explore the relationship between the features and the target variable (Yield (Quintal/ Hectare))"
      ],
      "metadata": {
        "id": "lrEqRJ5HeKdF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div style=\"color: black;\n",
        "            display: inline-block;\n",
        "            border-radius: 5px;\n",
        "            background-color: #9467bd;\n",
        "            font-size: 130%;\n",
        "            font-family: cursive;\n",
        "            letter-spacing: 0.5px;\n",
        "            padding: 10px;\">\n",
        "The Cost and Yield Metrics:\n",
        "\n",
        "</div>\n",
        "\n",
        "\n",
        "**Cost of Cultivation (/Hectare) A2+FL' (Cost_A2_FL):** This metric represents the cost of cultivation per hectare for a specific crop. It includes both the actual expenses incurred by farmers (A2) and the imputed value of family labor (FL). It takes into account various factors such as seeds, fertilizers, pesticides, labor, irrigation, machinery, and other inputs required for cultivation.\n",
        "\n",
        "**Cost of Cultivation (/Hectare) C2' (Cost_C2):** This metric refers to the comprehensive cost of cultivation per hectare. It includes all the costs covered in A2+FL and also considers the rental value of owned land and interest on the value of fixed capital assets, such as farm machinery and buildings. Cost_C2 provides a more comprehensive estimate of the total expenses incurred by farmers.\n",
        "\n",
        "**Cost of Production (/Quintal) C2' (Cost_Production):** This metric represents the cost of production per quintal of crop yield. It calculates the average cost required to produce one quintal (100 kilograms) of the crop, considering all the costs involved in cultivation as mentioned in Cost_C2.\n",
        "\n",
        "**Yield (Quintal/ Hectare):** Yield is a measure of crop productivity and represents the amount of crop produced per hectare of land. It is typically measured in quintals, where one quintal is equal to 100 kilograms. Yield is an important indicator of agricultural efficiency and determines the quantity of crop obtained from a given area of land.\n",
        "\n",
        "These metrics are essential for assessing the financial aspects and productivity of crop cultivation. They provide insights into the costs incurred by farmers, the efficiency of agricultural practices, and the productivity levels achieved in terms of crop yield. Understanding these metrics helps in analyzing the economics of crop production, optimizing resource allocation, and making informed decisions in agricultural planning and management."
      ],
      "metadata": {
        "id": "FE5MaeddeKdG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#check the shape of the data\n",
        "print(f' The dataset contains {data1.shape[1]} columns and {data1.shape[0]} rows')"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:42.814843Z",
          "iopub.execute_input": "2023-07-10T05:25:42.815224Z",
          "iopub.status.idle": "2023-07-10T05:25:42.82158Z",
          "shell.execute_reply.started": "2023-07-10T05:25:42.815195Z",
          "shell.execute_reply": "2023-07-10T05:25:42.820435Z"
        },
        "trusted": true,
        "id": "q2y0U8YHeKdH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the column names\n",
        "print(data1.columns)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:47.461858Z",
          "iopub.execute_input": "2023-07-10T05:25:47.462282Z",
          "iopub.status.idle": "2023-07-10T05:25:47.468278Z",
          "shell.execute_reply.started": "2023-07-10T05:25:47.46225Z",
          "shell.execute_reply": "2023-07-10T05:25:47.467053Z"
        },
        "trusted": true,
        "id": "N4WwO-vFeKdH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1.info()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:51.261053Z",
          "iopub.execute_input": "2023-07-10T05:25:51.261723Z",
          "iopub.status.idle": "2023-07-10T05:25:51.286185Z",
          "shell.execute_reply.started": "2023-07-10T05:25:51.261677Z",
          "shell.execute_reply": "2023-07-10T05:25:51.284971Z"
        },
        "trusted": true,
        "id": "oQx8hdPOeKdH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1.isnull().sum().sum()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:55.492869Z",
          "iopub.execute_input": "2023-07-10T05:25:55.493267Z",
          "iopub.status.idle": "2023-07-10T05:25:55.501954Z",
          "shell.execute_reply.started": "2023-07-10T05:25:55.493238Z",
          "shell.execute_reply": "2023-07-10T05:25:55.501125Z"
        },
        "trusted": true,
        "id": "ZUhwxW5QeKdI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#checking the null values in the data\n",
        "data1.isna().sum()/len(data1)*100"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:25:59.04195Z",
          "iopub.execute_input": "2023-07-10T05:25:59.042983Z",
          "iopub.status.idle": "2023-07-10T05:25:59.055097Z",
          "shell.execute_reply.started": "2023-07-10T05:25:59.042927Z",
          "shell.execute_reply": "2023-07-10T05:25:59.054015Z"
        },
        "trusted": true,
        "id": "ozPot4IseKdI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1.fillna(0, inplace=True)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:26:03.20254Z",
          "iopub.execute_input": "2023-07-10T05:26:03.202977Z",
          "iopub.status.idle": "2023-07-10T05:26:03.209299Z",
          "shell.execute_reply.started": "2023-07-10T05:26:03.202945Z",
          "shell.execute_reply": "2023-07-10T05:26:03.208101Z"
        },
        "trusted": true,
        "id": "gT426T2yeKdI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Lets check the duplicate values in the data\n",
        "print('The duplicate values in the data is', data1.duplicated().sum())"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:26:08.931575Z",
          "iopub.execute_input": "2023-07-10T05:26:08.93198Z",
          "iopub.status.idle": "2023-07-10T05:26:08.942193Z",
          "shell.execute_reply.started": "2023-07-10T05:26:08.931949Z",
          "shell.execute_reply": "2023-07-10T05:26:08.940932Z"
        },
        "trusted": true,
        "id": "nN71hAcOeKdJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Check the statistics in the data1\n",
        "data1.describe().style.background_gradient(cmap='viridis')"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:26:13.82592Z",
          "iopub.execute_input": "2023-07-10T05:26:13.826469Z",
          "iopub.status.idle": "2023-07-10T05:26:13.942903Z",
          "shell.execute_reply.started": "2023-07-10T05:26:13.826429Z",
          "shell.execute_reply": "2023-07-10T05:26:13.94178Z"
        },
        "trusted": true,
        "id": "lN_X-yRfeKdJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display:inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Histograms</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "AE31J5IJeKdJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Color palette for the histograms\n",
        "colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n",
        "\n",
        "# EDA - Histogram\n",
        "column_names = ['Cost_A2_FL', 'Cost_C2', 'Cost_Production', 'Yield']\n",
        "\n",
        "for i, column in enumerate(column_names):\n",
        "    fig = px.histogram(data1, x=column, nbins=10, marginal='box',\n",
        "                       labels={column: column})\n",
        "    fig.update_layout(title=f'Histogram of {column}', xaxis_title=column, yaxis_title='Count',\n",
        "                      plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)',\n",
        "                      font=dict(size=12))\n",
        "    fig.update_traces(marker_color=colors[i % len(colors)])\n",
        "    fig.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:26:19.047694Z",
          "iopub.execute_input": "2023-07-10T05:26:19.048131Z",
          "iopub.status.idle": "2023-07-10T05:26:21.036162Z",
          "shell.execute_reply.started": "2023-07-10T05:26:19.048098Z",
          "shell.execute_reply": "2023-07-10T05:26:21.035191Z"
        },
        "trusted": true,
        "id": "9PcbsbS-eKdJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Kernel Density Estimation of Cost</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "0Kf6wWbpeKdK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.set_theme(style=\"whitegrid\")\n",
        "\n",
        "# Plotting 'Cost_A2_FL'\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.displot(data=data1, x='Cost_A2_FL', hue=\"Crop\", kind=\"kde\", height=4, multiple=\"fill\", clip=(0, None), palette=\"ch:rot=-.75,hue=1,light=.75\")\n",
        "plt.title('Kernel Density Estimation of Cost_A2_FL by Crop')\n",
        "plt.xlabel('Cost_A2_FL')\n",
        "plt.ylabel('Density')\n",
        "plt.show()\n",
        "\n",
        "# Plotting 'Cost_C2'\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.displot(data=data1, x='Cost_C2', hue=\"Crop\", kind=\"kde\", height=4, multiple=\"fill\", clip=(0, None), palette=\"ch:rot=-.75,hue=1,light=.75\")\n",
        "plt.title('Kernel Density Estimation of Cost_C2 by Crop')\n",
        "plt.xlabel('Cost_C2')\n",
        "plt.ylabel('Density')\n",
        "plt.show()\n",
        "\n",
        "# Plotting 'Cost_Production'\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.displot(data=data1, x='Cost_Production', hue=\"Crop\", kind=\"kde\", height=4, multiple=\"fill\", clip=(0, None), palette=\"ch:rot=-.75,hue=1,light=.75\")\n",
        "plt.title('Kernel Density Estimation of Cost_Production by Crop')\n",
        "plt.xlabel('Cost_Production')\n",
        "plt.ylabel('Density')\n",
        "plt.show()\n",
        "\n",
        "# Plotting 'Yield'\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.displot(data=data1, x='Yield', hue=\"Crop\", kind=\"kde\", height=4, multiple=\"fill\", clip=(0, None), palette=\"ch:rot=-.75,hue=1,light=.75\")\n",
        "plt.title('Kernel Density Estimation of Yield by Crop')\n",
        "plt.xlabel('Yield')\n",
        "plt.ylabel('Density')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:26:33.461119Z",
          "iopub.execute_input": "2023-07-10T05:26:33.461591Z",
          "iopub.status.idle": "2023-07-10T05:26:38.107327Z",
          "shell.execute_reply.started": "2023-07-10T05:26:33.461556Z",
          "shell.execute_reply": "2023-07-10T05:26:38.106451Z"
        },
        "trusted": true,
        "id": "NTeJZVUYeKdK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Correlation Map</p></div>\n"
      ],
      "metadata": {
        "id": "nQXOPztoeKdK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#check the correlation map\n",
        "sns.heatmap(data1.corr(),annot=True,cmap='gnuplot2_r',fmt='.2f',linewidths=1)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:26:46.99945Z",
          "iopub.execute_input": "2023-07-10T05:26:47.000484Z",
          "iopub.status.idle": "2023-07-10T05:26:47.532501Z",
          "shell.execute_reply.started": "2023-07-10T05:26:47.000433Z",
          "shell.execute_reply": "2023-07-10T05:26:47.531477Z"
        },
        "trusted": true,
        "id": "yrZMC1jVeKdL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# What are the unique states in the data?\n",
        "states_in_data = data1['State'].unique()\n",
        "print('\\n The states in the data:', states_in_data)\n",
        "\n",
        "dominant_state = data1['State'].value_counts().idxmax()\n",
        "print('\\n The Dominant state:', dominant_state)\n",
        "\n",
        "less_dominant_state = data1['State'].value_counts().idxmin()\n",
        "print('\\n The Less Dominant State:', less_dominant_state)\n",
        "\n",
        "max_and_min_yield = (data1['Yield'].min(), data1['Yield'].max())\n",
        "print('\\nThe Minimum yield range:', max_and_min_yield)\n",
        "\n",
        "most_demand_crop = data1['Crop'].value_counts().idxmax()\n",
        "print('\\nThe most demanded crop in the data:', most_demand_crop)\n",
        "\n",
        "less_demand_crop = data1['Crop'].value_counts().idxmax()\n",
        "print('\\nThe less demanded crop in the data:', less_demand_crop)\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:26:53.742496Z",
          "iopub.execute_input": "2023-07-10T05:26:53.742908Z",
          "iopub.status.idle": "2023-07-10T05:26:53.757746Z",
          "shell.execute_reply.started": "2023-07-10T05:26:53.742868Z",
          "shell.execute_reply": "2023-07-10T05:26:53.756314Z"
        },
        "trusted": true,
        "id": "fcPKlSdYeKdL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Average Yield</p></div>\n"
      ],
      "metadata": {
        "id": "Vkd2NuNneKdM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the Average yield of the top 10 yield in the data\n",
        "avg_yield = data1.groupby('Yield')['Cost_A2_FL','Cost_C2','Cost_Production'].mean()\n",
        "avg_yield.head(10).style.background_gradient(cmap='tab20b')\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:27:00.623744Z",
          "iopub.execute_input": "2023-07-10T05:27:00.624196Z",
          "iopub.status.idle": "2023-07-10T05:27:00.647735Z",
          "shell.execute_reply.started": "2023-07-10T05:27:00.624162Z",
          "shell.execute_reply": "2023-07-10T05:27:00.646716Z"
        },
        "trusted": true,
        "id": "phD1Qn7ieKdM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Distribution of States in the Data</p></div>\n"
      ],
      "metadata": {
        "id": "UoBscXlbeKdM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# What are the unique states in the data\n",
        "states_in_data = data1['State'].unique()\n",
        "\n",
        "# Calculate the counts of each unique state\n",
        "state_counts = data1['State'].value_counts()\n",
        "\n",
        "# Plot a pie chart for the state counts\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.pie(state_counts, labels=states_in_data, autopct='%1.1f%%', startangle=90)\n",
        "plt.title('Distribution of States in the Data')\n",
        "plt.axis('equal')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:27:21.904316Z",
          "iopub.execute_input": "2023-07-10T05:27:21.905527Z",
          "iopub.status.idle": "2023-07-10T05:27:22.263393Z",
          "shell.execute_reply.started": "2023-07-10T05:27:21.905481Z",
          "shell.execute_reply": "2023-07-10T05:27:22.262368Z"
        },
        "trusted": true,
        "id": "bnE_W_G7eKdM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Top 10 Crop in the Data</p></div>\n"
      ],
      "metadata": {
        "id": "nKuUm3dkeKdN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#create a pie chart to visualize the top 10 crop in the data\n",
        "color = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',\n",
        "          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n",
        "\n",
        "label = ['ARHAR', 'COTTON', 'GRAM', 'GROUNDNUT', 'MAIZE', 'MOONG', 'PADDY', 'RAPESEED AND MUSTARD', 'SUGARCANE', 'WHEAT']\n",
        "\n",
        "data1['Crop'].value_counts().sort_values(ascending=False).head(10)\\\n",
        ".plot(kind = 'pie',labels=label, colors=color,\n",
        "      autopct ='%1.2f%%',\n",
        "      shadow=True)\n",
        "plt.title('Top 10 Crop in the Data')\n",
        "plt.show()"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:27:36.490417Z",
          "iopub.execute_input": "2023-07-10T05:27:36.490825Z",
          "iopub.status.idle": "2023-07-10T05:27:36.83802Z",
          "shell.execute_reply.started": "2023-07-10T05:27:36.490778Z",
          "shell.execute_reply": "2023-07-10T05:27:36.836683Z"
        },
        "trusted": true,
        "id": "5p1ZhZJxeKdN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the list of unique state\n",
        "state_list = data1['State'].unique()\n",
        "\n",
        "# Print the state list\n",
        "print(\"List of State:\")\n",
        "for state in state_list:\n",
        "    print(state)"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:27:50.877527Z",
          "iopub.execute_input": "2023-07-10T05:27:50.877927Z",
          "iopub.status.idle": "2023-07-10T05:27:50.885361Z",
          "shell.execute_reply.started": "2023-07-10T05:27:50.877898Z",
          "shell.execute_reply": "2023-07-10T05:27:50.883938Z"
        },
        "trusted": true,
        "id": "dMuKPboGeKdP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Top 5 States Producing Arhar</p></div>\n"
      ],
      "metadata": {
        "id": "vXREfsFjeKdP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#create a pie chart to visualization arhar produced by the states\n",
        "arhar = data1[data1['Crop']=='ARHAR']\n",
        "label = ['Uttar Pradesh','Karnataka','Gujarat','Andhra Pradesh',\n",
        "         'Maharashtra','Punjab','Haryana','Rajasthan','Madhya Pradesh',\n",
        "         'Tamil Nadu','Bihar','Orissa','West Bengal']\n",
        "arhar['State'].value_counts().head(10).sort_values(ascending=False)\\\n",
        "    .plot(kind='pie', labels=label,\n",
        "          colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',\n",
        "          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'],\n",
        "          autopct='%1.2f%%',\n",
        "          shadow=True)\n",
        "plt.title(\"Top 5 States Producing Arhar\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:43:15.676958Z",
          "iopub.execute_input": "2023-07-10T05:43:15.677446Z",
          "iopub.status.idle": "2023-07-10T05:43:15.939684Z",
          "shell.execute_reply.started": "2023-07-10T05:43:15.677412Z",
          "shell.execute_reply": "2023-07-10T05:43:15.938394Z"
        },
        "trusted": true,
        "id": "5fdkCZJaeKdQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Top 5 States Producing Wheat</p></div>\n"
      ],
      "metadata": {
        "id": "7M0dfFfceKdQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#create a pie chart to visualization wheat produced by the states\n",
        "wheat = data1[data1['Crop']=='WHEAT']\n",
        "label = ['Uttar Pradesh','Karnataka','Gujarat','Andhra Pradesh',\n",
        "         'Maharashtra','Punjab','Haryana','Rajasthan','Madhya Pradesh',\n",
        "         'Tamil Nadu','Bihar','Orissa','West Bengal']\n",
        "arhar['State'].value_counts().head(10).sort_values(ascending=False)\\\n",
        "    .plot(kind='pie', labels=label,\n",
        "          colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',\n",
        "          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'],\n",
        "          autopct='%1.2f%%',\n",
        "          shadow=True)\n",
        "plt.title(\"Top 5 States Producing Wheat\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:28:41.709472Z",
          "iopub.execute_input": "2023-07-10T05:28:41.7099Z",
          "iopub.status.idle": "2023-07-10T05:28:41.972891Z",
          "shell.execute_reply.started": "2023-07-10T05:28:41.709868Z",
          "shell.execute_reply": "2023-07-10T05:28:41.971712Z"
        },
        "trusted": true,
        "id": "LSDtKZYIeKdR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the Top 10 Minimum and Maximum values of the crop\n",
        "crop_stats = data1.groupby('Crop')[['Cost_A2_FL', 'Cost_C2', 'Cost_Production']].agg(['min', 'max'])\n",
        "crop_stats.head(10).style.background_gradient(cmap='nipy_spectral_r')\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:29:04.010839Z",
          "iopub.execute_input": "2023-07-10T05:29:04.01161Z",
          "iopub.status.idle": "2023-07-10T05:29:04.055371Z",
          "shell.execute_reply.started": "2023-07-10T05:29:04.011577Z",
          "shell.execute_reply": "2023-07-10T05:29:04.054362Z"
        },
        "trusted": true,
        "id": "NsS_59z1eKdR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Cost of Cultivation (/Hectare) A2+FL by Crop</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "SJmrcj0_eKdS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data\n",
        "crop_data = {\n",
        "    'Crop': ['ARHAR', 'COTTON', 'GRAM', 'GROUNDNUT', 'MAIZE', 'MOONG', 'PADDY', 'RAPESEED AND MUSTARD', 'SUGARCANE', 'WHEAT'],\n",
        "    'min_Cost_A2_FL': [9794.05, 23711.44, 8552.69, 13647.1, 13513.92, 5483.54, 17022.0, 8686.43, 24538.32, 12464.4],\n",
        "    'max_Cost_A2_FL': [17130.55, 29918.97, 14421.98, 26078.66, 25687.09, 10780.76, 29664.84, 14715.27, 66335.06, 19119.08],\n",
        "    'min_Cost_C2': [16528.68, 33116.82, 12610.85, 17314.2, 19810.29, 7868.64, 25909.05, 17705.93, 45239.51, 22489.75],\n",
        "    'max_Cost_C2': [25270.26, 50828.83, 26762.09, 32683.46, 37801.85, 15371.45, 46450.2, 27507.54, 91442.63, 35423.48],\n",
        "    'min_Cost_Production': [1898.3, 2003.76, 1551.94, 1918.92, 404.43, 2068.67, 669.86, 1251.12, 85.79, 683.58],\n",
        "    'max_Cost_Production': [3670.54, 2539.47, 2277.68, 3484.01, 1387.36, 5777.48, 789.9, 1610.4, 119.72, 810.25]\n",
        "}\n",
        "\n",
        "# Convert data to a DataFrame\n",
        "crop_df = pd.DataFrame(crop_data)\n",
        "\n",
        "# Set Crop column as the index\n",
        "crop_df.set_index('Crop', inplace=True)\n",
        "\n",
        "# Plotting\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6', '#c2c2c2', '#b3e6cc', '#e6b3cc', '#e6e6cc']\n",
        "\n",
        "# Plotting pie chart for min_Cost_A2_FL= Cost of Cultivation (`/Hectare) A2+FL\n",
        "ax.pie(crop_df['min_Cost_A2_FL'], labels=crop_df.index, autopct='%1.1f%%', colors=colors)\n",
        "ax.set_title('Minimum Cost of Cultivation (`/Hectare) A2+FL by Crop')\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:29:18.500377Z",
          "iopub.execute_input": "2023-07-10T05:29:18.501646Z",
          "iopub.status.idle": "2023-07-10T05:29:18.786743Z",
          "shell.execute_reply.started": "2023-07-10T05:29:18.501603Z",
          "shell.execute_reply": "2023-07-10T05:29:18.785916Z"
        },
        "trusted": true,
        "id": "iUo-epGheKdS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6', '#c2c2c2', '#b3e6cc', '#e6b3cc', '#e6e6cc']\n",
        "\n",
        "# Plotting pie chart for max_Cost_A2_FL= Cost of Cultivation (`/Hectare) A2+FL\n",
        "ax.pie(crop_df['max_Cost_A2_FL'], labels=crop_df.index, autopct='%1.1f%%', colors=colors)\n",
        "ax.set_title('Maximum Cost of Cultivation (`/Hectare) A2+FL by Crop')\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:29:38.917495Z",
          "iopub.execute_input": "2023-07-10T05:29:38.918623Z",
          "iopub.status.idle": "2023-07-10T05:29:39.19865Z",
          "shell.execute_reply.started": "2023-07-10T05:29:38.918584Z",
          "shell.execute_reply": "2023-07-10T05:29:39.197494Z"
        },
        "trusted": true,
        "id": "0FJa4zbgeKdS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Cost of Cultivation (/Hectare) C2 by Crop</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "8m0JD9ggeKdT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define colors for each pie slice\n",
        "colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6', '#c2c2c2', '#b3e6cc', '#e6b3cc', '#e6e6cc']\n",
        "\n",
        "# Create the pie chart\n",
        "fig = go.Figure(data=[go.Pie(labels=crop_df.index, values=crop_df['min_Cost_C2'], hole=0.3, textinfo='label+percent', marker=dict(colors=colors))])\n",
        "fig.update_layout(title='Minimum Cost of Cultivation (`/Hectare) C2 by Crop')\n",
        "\n",
        "# Show the pie chart\n",
        "fig.show()"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:29:54.300485Z",
          "iopub.execute_input": "2023-07-10T05:29:54.301613Z",
          "iopub.status.idle": "2023-07-10T05:29:54.331012Z",
          "shell.execute_reply.started": "2023-07-10T05:29:54.301573Z",
          "shell.execute_reply": "2023-07-10T05:29:54.329711Z"
        },
        "trusted": true,
        "id": "m_CZxrWXeKdT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "\n",
        "# Define colors for each pie slice\n",
        "colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6', '#c2c2c2', '#b3e6cc', '#e6b3cc', '#e6e6cc']\n",
        "\n",
        "# Create the pie chart\n",
        "fig = go.Figure(data=[go.Pie(labels=crop_df.index, values=crop_df['max_Cost_C2'], hole=0.3, textinfo='label+percent', marker=dict(colors=colors))])\n",
        "fig.update_layout(title='Maximum Cost of Cultivation (`/Hectare) C2 by Crop')\n",
        "\n",
        "# Show the pie chart\n",
        "fig.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:30:06.833544Z",
          "iopub.execute_input": "2023-07-10T05:30:06.833955Z",
          "iopub.status.idle": "2023-07-10T05:30:06.848447Z",
          "shell.execute_reply.started": "2023-07-10T05:30:06.833925Z",
          "shell.execute_reply": "2023-07-10T05:30:06.847281Z"
        },
        "trusted": true,
        "id": "-voAm0d2eKdT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Cost of Production by Crop</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "PDejVLGceKdU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "\n",
        "# Create the sunburst chart\n",
        "fig = go.Figure(go.Sunburst(\n",
        "    labels=crop_df.index,\n",
        "    parents=[''] * len(crop_df.index),\n",
        "    values=crop_df['min_Cost_Production'],\n",
        "    branchvalues='total',\n",
        "    hovertemplate='<b>%{label}</b><br>Value: %{value}<br>Percentage: %{percentRoot:.1%}',\n",
        "))\n",
        "\n",
        "fig.update_traces(textinfo='label+percent root')\n",
        "fig.update_layout(\n",
        "    title='Minimum Cost Production by Crop',\n",
        "    sunburstcolorway=['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FFB3E6', '#C2C2C2', '#B3E6CC', '#E6B3CC', '#E6E6CC'],\n",
        ")\n",
        "\n",
        "# Show the sunburst chart\n",
        "fig.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:30:14.102718Z",
          "iopub.execute_input": "2023-07-10T05:30:14.103108Z",
          "iopub.status.idle": "2023-07-10T05:30:14.130831Z",
          "shell.execute_reply.started": "2023-07-10T05:30:14.103078Z",
          "shell.execute_reply": "2023-07-10T05:30:14.129647Z"
        },
        "trusted": true,
        "id": "Y48LM5GTeKdU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the sunburst chart\n",
        "fig = go.Figure(go.Sunburst(\n",
        "    labels=crop_df.index,\n",
        "    parents=[''] * len(crop_df.index),\n",
        "    values=crop_df['max_Cost_Production'],\n",
        "    branchvalues='total',\n",
        "    hovertemplate='<b>%{label}</b><br>Value: %{value}<br>Percentage: %{percentRoot:.1%}',\n",
        "))\n",
        "\n",
        "fig.update_traces(textinfo='label+percent root')\n",
        "fig.update_layout(\n",
        "    title='Maximum Cost Production by Crop',\n",
        "    sunburstcolorway=['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FFB3E6', '#C2C2C2', '#B3E6CC', '#E6B3CC', '#E6E6CC'],\n",
        ")\n",
        "\n",
        "# Show the sunburst chart\n",
        "fig.show()"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:30:21.63692Z",
          "iopub.execute_input": "2023-07-10T05:30:21.63734Z",
          "iopub.status.idle": "2023-07-10T05:30:21.653895Z",
          "shell.execute_reply.started": "2023-07-10T05:30:21.637308Z",
          "shell.execute_reply": "2023-07-10T05:30:21.652742Z"
        },
        "trusted": true,
        "id": "SJa19hV3eKdU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the crop with the minimum cost of production\n",
        "crop_min_cost = data1[data1['Cost_Production'] == data1['Cost_Production'].min()]['Crop']\n",
        "crop_min_cost"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:30:31.31613Z",
          "iopub.execute_input": "2023-07-10T05:30:31.316603Z",
          "iopub.status.idle": "2023-07-10T05:30:31.327134Z",
          "shell.execute_reply.started": "2023-07-10T05:30:31.316567Z",
          "shell.execute_reply": "2023-07-10T05:30:31.326016Z"
        },
        "trusted": true,
        "id": "Zg2fxtl4eKdV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the crop with the minimum cost of production\n",
        "crop_min_cost = data1[data1['Crop'] == 'SUGARCANE'].groupby(['State', 'Crop'])['Cost_Production'].sum()\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x=crop_min_cost.index.get_level_values('Crop'), y=crop_min_cost.values)\n",
        "plt.xlabel('Crop')\n",
        "plt.ylabel('Sum of Cost Production')\n",
        "plt.title('Sum of Cost Production by Crop and State')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:30:35.694946Z",
          "iopub.execute_input": "2023-07-10T05:30:35.695372Z",
          "iopub.status.idle": "2023-07-10T05:30:36.024108Z",
          "shell.execute_reply.started": "2023-07-10T05:30:35.69533Z",
          "shell.execute_reply": "2023-07-10T05:30:36.022962Z"
        },
        "trusted": true,
        "id": "YlQl-e0QeKdV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the crop with the maximum cost of production\n",
        "crop_max_cost = data1[data1['Cost_Production'] == data1['Cost_Production'].max()]['Crop']\n",
        "crop_max_cost"
      ],
      "metadata": {
        "_kg_hide-input": true,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:30:47.869061Z",
          "iopub.execute_input": "2023-07-10T05:30:47.86949Z",
          "iopub.status.idle": "2023-07-10T05:30:47.88089Z",
          "shell.execute_reply.started": "2023-07-10T05:30:47.869459Z",
          "shell.execute_reply": "2023-07-10T05:30:47.879618Z"
        },
        "trusted": true,
        "id": "fSUgbokFeKdV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the crop with the minimum cost of production\n",
        "crop_max_cost = data1[data1['Crop'] == 'MOONG'].groupby(['State', 'Crop'])['Cost_Production'].sum()\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x=crop_max_cost.index.get_level_values('Crop'), y=crop_min_cost.values)\n",
        "plt.xlabel('Crop')\n",
        "plt.ylabel('Sum of Cost Production')\n",
        "plt.title('Sum of Cost Production by Crop and State')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:30:52.546698Z",
          "iopub.execute_input": "2023-07-10T05:30:52.547089Z",
          "iopub.status.idle": "2023-07-10T05:30:52.86723Z",
          "shell.execute_reply.started": "2023-07-10T05:30:52.547061Z",
          "shell.execute_reply": "2023-07-10T05:30:52.866101Z"
        },
        "trusted": true,
        "id": "6dhqtY-GeKdW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> | Yield</b> </p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "KPpMBcgSeKdW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Create a bar chart to understand which states have the highest minimum yield\n",
        "data1.groupby('State')['Yield'].sum().sort_values(ascending=False).plot(kind='bar', title=\"The Sum of the Minimum Yield by state\", figsize=(8, 6), color='steelblue')\n",
        "plt.xlabel(\"States\")\n",
        "plt.ylabel(\"Sum of the Minimum Yield\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": true,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:31:05.197113Z",
          "iopub.execute_input": "2023-07-10T05:31:05.1976Z",
          "iopub.status.idle": "2023-07-10T05:31:05.669584Z",
          "shell.execute_reply.started": "2023-07-10T05:31:05.197551Z",
          "shell.execute_reply": "2023-07-10T05:31:05.668465Z"
        },
        "trusted": true,
        "id": "PMPE3wL2eKdW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the sum of maximum yield for each state\n",
        "state_yield_sum = data1.groupby('State')['Yield'].sum()\n",
        "\n",
        "# Find the state with the maximum sum of maximum yield\n",
        "max_yield_state = state_yield_sum.idxmax()\n",
        "\n",
        "# Create a bar chart to visualize the sum of maximum yield for each state\n",
        "state_yield_sum.sort_values(ascending=False).plot(kind='bar', title=\"Sum of Maximum Yield by State\", figsize=(8, 6), color='steelblue')\n",
        "\n",
        "# Highlight the state with the maximum sum of minimum yield\n",
        "plt.axhline(y=state_yield_sum[max_yield_state], color='red', linestyle='--', label=f'Max Yield State: {max_yield_state}')\n",
        "\n",
        "plt.xlabel(\"States\")\n",
        "plt.ylabel(\"Sum of Maximum Yield\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:31:16.176573Z",
          "iopub.execute_input": "2023-07-10T05:31:16.177028Z",
          "iopub.status.idle": "2023-07-10T05:31:16.718971Z",
          "shell.execute_reply.started": "2023-07-10T05:31:16.176996Z",
          "shell.execute_reply": "2023-07-10T05:31:16.717624Z"
        },
        "trusted": true,
        "id": "X0yPZXTQeKdX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Count the number of unique crop types\n",
        "num_crops = data1['Crop'].nunique()\n",
        "\n",
        "# Print the result\n",
        "print(\"Number of unique crop types:\", num_crops)\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:31:26.738429Z",
          "iopub.execute_input": "2023-07-10T05:31:26.7394Z",
          "iopub.status.idle": "2023-07-10T05:31:26.745587Z",
          "shell.execute_reply.started": "2023-07-10T05:31:26.73935Z",
          "shell.execute_reply": "2023-07-10T05:31:26.744414Z"
        },
        "trusted": true,
        "id": "bzLTcGtueKdX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the list of unique crop types\n",
        "crop_list = data1['Crop'].unique()\n",
        "\n",
        "# Print the crop list\n",
        "print(\"List of crop types:\")\n",
        "for crop in crop_list:\n",
        "    print(crop)\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:31:32.34286Z",
          "iopub.execute_input": "2023-07-10T05:31:32.343276Z",
          "iopub.status.idle": "2023-07-10T05:31:32.350072Z",
          "shell.execute_reply.started": "2023-07-10T05:31:32.343246Z",
          "shell.execute_reply": "2023-07-10T05:31:32.349055Z"
        },
        "trusted": true,
        "id": "CXrF2de2eKdX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# List of crop types to plot\n",
        "crop_types = ['ARHAR', 'COTTON', 'GRAM', 'GROUNDNUT', 'MAIZE', 'MOONG', 'PADDY', 'RAPESEED AND MUSTARD', 'SUGARCANE', 'WHEAT']\n",
        "\n",
        "# Filter data for the selected crop types\n",
        "filtered_data = data1[data1['Crop'].isin(crop_types)]\n",
        "\n",
        "# Create a bar chart to find the yield generated from the selected crops\n",
        "filtered_data.groupby('Crop')['Yield'].sum().sort_values(ascending=False).plot(kind='bar', title='Yield Generated from Crops', figsize=(8, 6), color='steelblue')\n",
        "plt.xlabel(\"Crop\")\n",
        "plt.ylabel(\"Sum of Yield\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:31:37.095082Z",
          "iopub.execute_input": "2023-07-10T05:31:37.095529Z",
          "iopub.status.idle": "2023-07-10T05:31:37.553849Z",
          "shell.execute_reply.started": "2023-07-10T05:31:37.095495Z",
          "shell.execute_reply": "2023-07-10T05:31:37.55271Z"
        },
        "trusted": true,
        "id": "QlRoaaTPeKdY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate average values\n",
        "avg_cost_production = data1['Cost_Production'].mean()\n",
        "avg_yield = data1['Yield'].mean()\n",
        "\n",
        "# Create a bar plot using plotly\n",
        "fig = go.Figure()\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    x=data1['State'],\n",
        "    y=data1['Cost_Production'],\n",
        "    name='Cost of Production',\n",
        "    marker_color='royalblue'\n",
        "))\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    x=data1['State'],\n",
        "    y=data1['Yield'],\n",
        "    name='Yield',\n",
        "    marker_color='limegreen'\n",
        "))\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=data1['State'],\n",
        "    y=[avg_cost_production] * len(data1),\n",
        "    mode='lines',\n",
        "    name='Average Cost of Production',\n",
        "    line=dict(color='red', dash='dash')\n",
        "))\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=data1['State'],\n",
        "    y=[avg_yield] * len(data1),\n",
        "    mode='lines',\n",
        "    name='Average Yield',\n",
        "    line=dict(color='orange', dash='dash')\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Cost of Production and Yield by State',\n",
        "    xaxis_title='State',\n",
        "    yaxis_title='Value',\n",
        "    barmode='group',\n",
        "    legend=dict(x=0, y=1.0, bgcolor='rgba(255, 255, 255, 0.5)', bordercolor='black', borderwidth=1)\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:31:54.762768Z",
          "iopub.execute_input": "2023-07-10T05:31:54.763167Z",
          "iopub.status.idle": "2023-07-10T05:31:54.825613Z",
          "shell.execute_reply.started": "2023-07-10T05:31:54.763138Z",
          "shell.execute_reply": "2023-07-10T05:31:54.82438Z"
        },
        "trusted": true,
        "id": "PO9pe8mNeKdY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data2.head().style.set_properties(**{'background-color':'green','color':'white','border-color':'#8b8c8c'})"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:08.630096Z",
          "iopub.execute_input": "2023-07-10T05:32:08.63052Z",
          "iopub.status.idle": "2023-07-10T05:32:08.651798Z",
          "shell.execute_reply.started": "2023-07-10T05:32:08.630488Z",
          "shell.execute_reply": "2023-07-10T05:32:08.650661Z"
        },
        "trusted": true,
        "id": "QTlX3ZHZeKdY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the column names\n",
        "print(data2.columns)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:12.768884Z",
          "iopub.execute_input": "2023-07-10T05:32:12.769274Z",
          "iopub.status.idle": "2023-07-10T05:32:12.77528Z",
          "shell.execute_reply.started": "2023-07-10T05:32:12.769247Z",
          "shell.execute_reply": "2023-07-10T05:32:12.773969Z"
        },
        "trusted": true,
        "id": "2_I7Uq5MeKdY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "\n",
        "# Create a trace for each crop\n",
        "traces = []\n",
        "for crop in data2['Crop             ']:\n",
        "    trace = go.Scatter(x=data2.columns[1:], y=data2[data2['Crop             '] == crop].values.flatten()[1:], mode='lines+markers', name=crop)\n",
        "    traces.append(trace)\n",
        "\n",
        "# Create the layout\n",
        "layout = go.Layout(\n",
        "    title='Crop Production and Yield',\n",
        "    xaxis=dict(title='Year'),\n",
        "    yaxis=dict(title='Quantity'),\n",
        "    legend=dict(x=0, y=1)\n",
        ")\n",
        "\n",
        "# Create the figure\n",
        "fig = go.Figure(data=traces, layout=layout)\n",
        "\n",
        "# Show the figure\n",
        "fig.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:17.319583Z",
          "iopub.execute_input": "2023-07-10T05:32:17.320013Z",
          "iopub.status.idle": "2023-07-10T05:32:17.407032Z",
          "shell.execute_reply.started": "2023-07-10T05:32:17.31998Z",
          "shell.execute_reply": "2023-07-10T05:32:17.406109Z"
        },
        "trusted": true,
        "id": "0NFfWP59eKdZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data3 = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/datafile (2).csv')\n",
        "data3.head().style.set_properties(**{'background-color':'red','color':'white','border-color':'#8b8c8c'})"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:25.709656Z",
          "iopub.execute_input": "2023-07-10T05:32:25.710091Z",
          "iopub.status.idle": "2023-07-10T05:32:25.742239Z",
          "shell.execute_reply.started": "2023-07-10T05:32:25.710057Z",
          "shell.execute_reply": "2023-07-10T05:32:25.741093Z"
        },
        "trusted": true,
        "id": "njqScvzieKdZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the column names\n",
        "print(data3.columns)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:29.994476Z",
          "iopub.execute_input": "2023-07-10T05:32:29.994896Z",
          "iopub.status.idle": "2023-07-10T05:32:30.000615Z",
          "shell.execute_reply.started": "2023-07-10T05:32:29.994861Z",
          "shell.execute_reply": "2023-07-10T05:32:29.999517Z"
        },
        "trusted": true,
        "id": "Az-A8wPDeKdZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Crop Production and Yield</p></div>\n"
      ],
      "metadata": {
        "id": "YGrSeVuJeKda"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the crops and corresponding colors\n",
        "crops = ['Total Foodgrains', 'Rice', 'Wheat', 'Jowar', 'Bajra']\n",
        "colors = ['steelblue', 'royalblue', 'cornflowerblue', 'lightskyblue', 'lightblue']\n",
        "\n",
        "# Create the traces for each crop\n",
        "traces = []\n",
        "for i, crop in enumerate(crops):\n",
        "    trace = go.Bar(\n",
        "        x=data3.columns[1:],\n",
        "        y=data3.loc[data3['Crop             '] == crop, data3.columns[1:]].values.flatten(),\n",
        "        name=crop,\n",
        "        marker=dict(color=colors[i])\n",
        "    )\n",
        "    traces.append(trace)\n",
        "\n",
        "# Create the layout\n",
        "layout = go.Layout(\n",
        "    title='Crop Production and Yield',\n",
        "    xaxis=dict(title='Year'),\n",
        "    yaxis=dict(title='Quantity'),\n",
        "    barmode='group'\n",
        ")\n",
        "\n",
        "# Create the figure\n",
        "fig = go.Figure(data=traces, layout=layout)\n",
        "\n",
        "# Show the figure\n",
        "fig.show()"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:34.238717Z",
          "iopub.execute_input": "2023-07-10T05:32:34.23914Z",
          "iopub.status.idle": "2023-07-10T05:32:34.266555Z",
          "shell.execute_reply.started": "2023-07-10T05:32:34.239108Z",
          "shell.execute_reply": "2023-07-10T05:32:34.265444Z"
        },
        "trusted": true,
        "id": "Ixq5NoaOeKda"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datafile = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/datafile.csv')\n",
        "datafile.head().style.set_properties(**{'background-color':'blue','color':'white','border-color':'#8b8c8c'})"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:42.247825Z",
          "iopub.execute_input": "2023-07-10T05:32:42.248296Z",
          "iopub.status.idle": "2023-07-10T05:32:42.26767Z",
          "shell.execute_reply.started": "2023-07-10T05:32:42.248264Z",
          "shell.execute_reply": "2023-07-10T05:32:42.266547Z"
        },
        "trusted": true,
        "id": "dLbOwsZmeKda"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the column names\n",
        "print(datafile.columns)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:46.437927Z",
          "iopub.execute_input": "2023-07-10T05:32:46.438381Z",
          "iopub.status.idle": "2023-07-10T05:32:46.443619Z",
          "shell.execute_reply.started": "2023-07-10T05:32:46.438344Z",
          "shell.execute_reply": "2023-07-10T05:32:46.442715Z"
        },
        "trusted": true,
        "id": "Bmi3LSuDeKdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datafile.isnull().sum().sum()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:32:57.655185Z",
          "iopub.execute_input": "2023-07-10T05:32:57.655619Z",
          "iopub.status.idle": "2023-07-10T05:32:57.66452Z",
          "shell.execute_reply.started": "2023-07-10T05:32:57.655587Z",
          "shell.execute_reply": "2023-07-10T05:32:57.663071Z"
        },
        "trusted": true,
        "id": "vMs_MImZeKdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datafile.fillna(0, inplace=True)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:02.05629Z",
          "iopub.execute_input": "2023-07-10T05:33:02.056781Z",
          "iopub.status.idle": "2023-07-10T05:33:02.063852Z",
          "shell.execute_reply.started": "2023-07-10T05:33:02.056747Z",
          "shell.execute_reply": "2023-07-10T05:33:02.062836Z"
        },
        "trusted": true,
        "id": "y3aDHChmeKdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Lets check the duplicate values in the data\n",
        "print('The duplicate values in the datafile is', datafile.duplicated().sum())"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:08.613313Z",
          "iopub.execute_input": "2023-07-10T05:33:08.61373Z",
          "iopub.status.idle": "2023-07-10T05:33:08.621772Z",
          "shell.execute_reply.started": "2023-07-10T05:33:08.613701Z",
          "shell.execute_reply": "2023-07-10T05:33:08.620597Z"
        },
        "trusted": true,
        "id": "ZHVNAdcTeKdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Crop Growth Over Time</p></div>\n"
      ],
      "metadata": {
        "id": "4OxtjY8-eKdb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "\n",
        "# Define the crops and corresponding colors\n",
        "crops = ['Rice', 'Wheat', 'Coarse Cereals', 'Pulses', 'Vegetables']\n",
        "colors = ['steelblue', 'royalblue', 'cornflowerblue', 'lightskyblue', 'lightblue']\n",
        "\n",
        "# Create the traces for each crop\n",
        "traces = []\n",
        "for i, crop in enumerate(crops):\n",
        "    trace = go.Scatter(\n",
        "        x=datafile.columns[1:],\n",
        "        y=datafile.loc[datafile['Crop'] == crop, datafile.columns[1:]].values.flatten(),\n",
        "        mode='lines+markers',\n",
        "        name=crop,\n",
        "        line=dict(color=colors[i])\n",
        "    )\n",
        "    traces.append(trace)\n",
        "\n",
        "# Create the layout\n",
        "layout = go.Layout(\n",
        "    title='Crop Growth Over Time',\n",
        "    xaxis=dict(title='Year'),\n",
        "    yaxis=dict(title='Percentage'),\n",
        ")\n",
        "\n",
        "# Create the figure\n",
        "fig = go.Figure(data=traces, layout=layout)\n",
        "\n",
        "# Show the figure\n",
        "fig.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:13.958922Z",
          "iopub.execute_input": "2023-07-10T05:33:13.959365Z",
          "iopub.status.idle": "2023-07-10T05:33:13.985986Z",
          "shell.execute_reply.started": "2023-07-10T05:33:13.959331Z",
          "shell.execute_reply": "2023-07-10T05:33:13.984781Z"
        },
        "trusted": true,
        "id": "c1KoBRnAeKdc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "produce = pd.read_csv('/kaggle/input/agricuture-crops-production-in-india/produce.csv')\n",
        "produce.head().style.set_properties(**{'background-color':'yellow','color':'black','border-color':'#8b8c8c'})"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:27.930443Z",
          "iopub.execute_input": "2023-07-10T05:33:27.930865Z",
          "iopub.status.idle": "2023-07-10T05:33:27.964498Z",
          "shell.execute_reply.started": "2023-07-10T05:33:27.930834Z",
          "shell.execute_reply": "2023-07-10T05:33:27.963226Z"
        },
        "trusted": true,
        "id": "E0hmmzGXeKdc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the column names\n",
        "print(produce.columns)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:32.50727Z",
          "iopub.execute_input": "2023-07-10T05:33:32.507749Z",
          "iopub.status.idle": "2023-07-10T05:33:32.514355Z",
          "shell.execute_reply.started": "2023-07-10T05:33:32.507715Z",
          "shell.execute_reply": "2023-07-10T05:33:32.513205Z"
        },
        "trusted": true,
        "id": "WNRbXwVgeKdc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "produce.isnull().sum().sum()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:37.03496Z",
          "iopub.execute_input": "2023-07-10T05:33:37.035405Z",
          "iopub.status.idle": "2023-07-10T05:33:37.045227Z",
          "shell.execute_reply.started": "2023-07-10T05:33:37.035354Z",
          "shell.execute_reply": "2023-07-10T05:33:37.044141Z"
        },
        "trusted": true,
        "id": "8aUjv3pOeKdc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "produce.fillna(0, inplace=True)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:41.04812Z",
          "iopub.execute_input": "2023-07-10T05:33:41.048534Z",
          "iopub.status.idle": "2023-07-10T05:33:41.054562Z",
          "shell.execute_reply.started": "2023-07-10T05:33:41.048503Z",
          "shell.execute_reply": "2023-07-10T05:33:41.053643Z"
        },
        "trusted": true,
        "id": "D4YLEzc8eKdd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Lets check the duplicate values in the data\n",
        "print('The duplicate values in the produce is', produce.duplicated().sum())"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:47.176862Z",
          "iopub.execute_input": "2023-07-10T05:33:47.177313Z",
          "iopub.status.idle": "2023-07-10T05:33:47.188287Z",
          "shell.execute_reply.started": "2023-07-10T05:33:47.17728Z",
          "shell.execute_reply": "2023-07-10T05:33:47.187457Z"
        },
        "trusted": true,
        "id": "PFgmxE_neKdd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "produce.head()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:51.500645Z",
          "iopub.execute_input": "2023-07-10T05:33:51.501089Z",
          "iopub.status.idle": "2023-07-10T05:33:51.543018Z",
          "shell.execute_reply.started": "2023-07-10T05:33:51.501053Z",
          "shell.execute_reply": "2023-07-10T05:33:51.541778Z"
        },
        "trusted": true,
        "id": "KFacwY9XeKdd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> Agricultural Production Over Time</p></div>\n"
      ],
      "metadata": {
        "id": "ntXD7nYNeKdd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = go.Figure()\n",
        "\n",
        "for i, row in produce.iterrows():\n",
        "    crop = row['Particulars']\n",
        "    years = produce.columns[3:]\n",
        "    production = row[3:]\n",
        "\n",
        "    fig.add_trace(go.Scatter(\n",
        "        x=years,\n",
        "        y=production,\n",
        "        mode='lines+markers',\n",
        "        name=crop\n",
        "    ))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Agricultural Production Over Time',\n",
        "    xaxis_title='Year',\n",
        "    yaxis_title='Production (Ton mn)'\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:33:57.250065Z",
          "iopub.execute_input": "2023-07-10T05:33:57.25053Z",
          "iopub.status.idle": "2023-07-10T05:33:57.690871Z",
          "shell.execute_reply.started": "2023-07-10T05:33:57.250494Z",
          "shell.execute_reply": "2023-07-10T05:33:57.689972Z"
        },
        "trusted": true,
        "id": "fux7XVMUeKdd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set the style of the plot\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Create the line plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "for i, row in produce.iterrows():\n",
        "    crop = row['Particulars']\n",
        "    years = produce.columns[3:]\n",
        "    production = row[3:]\n",
        "    sns.lineplot(x=years, y=production, label=crop)\n",
        "\n",
        "# Set the labels and title\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Production (Ton mn)')\n",
        "plt.title('Agricultural Production Over Time')\n",
        "\n",
        "# Display the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "_kg_hide-input": true,
        "_kg_hide-output": true,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:37:41.618246Z",
          "iopub.execute_input": "2023-07-10T05:37:41.618756Z",
          "iopub.status.idle": "2023-07-10T05:39:35.249892Z",
          "shell.execute_reply.started": "2023-07-10T05:37:41.618706Z",
          "shell.execute_reply": "2023-07-10T05:39:35.247066Z"
        },
        "trusted": true,
        "id": "yHmXPHoXeKdd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display:fill;border-radius:5px;background-color:#1f77b4;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b>5 |</b> Training prediction and evaluation</p></div>\n",
        "\n",
        "\n",
        "To perform a training prediction and evaluation using decision tree, linear regression, XGBoost, and Random Forest on the given dataset, we'll need to follow these steps:\n",
        "\n",
        "1. **Prepare the data:** Split the dataset into input features (X) and target variable (y).\n",
        "\n",
        "2. **Split the data into training and testing sets:** Divide the data into two parts, one for training the models and the other for evaluating the performance.\n",
        "\n",
        "3. **Train the models:** Fit each model on the training data.\n",
        "\n",
        "4. **Make predictions:** Use the trained models to make predictions on the testing data.\n",
        "\n",
        "5. **Evaluate the models:** Calculate evaluation metrics such as mean squared error (MSE) or mean absolute error (MAE) to assess the performance of each model.\n",
        "\n",
        "6. **Visualize the results:** Create plotly plots to compare the predictions and actual values."
      ],
      "metadata": {
        "id": "bveGexN1eKde"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%capture\n",
        "!pip install graphviz"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-07-10T05:40:10.086888Z",
          "iopub.execute_input": "2023-07-10T05:40:10.087717Z",
          "iopub.status.idle": "2023-07-10T05:40:24.329929Z",
          "shell.execute_reply.started": "2023-07-10T05:40:10.087677Z",
          "shell.execute_reply": "2023-07-10T05:40:24.328371Z"
        },
        "trusted": true,
        "id": "Dggbz4bPeKde"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "from sklearn.tree import export_graphviz\n",
        "import graphviz\n",
        "\n",
        "# Split the data into input features (X) and target variable (y)\n",
        "X = data1[['Cost_A2_FL', 'Cost_C2', 'Cost_Production']]\n",
        "y = data1['Yield']\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:40:30.319344Z",
          "iopub.execute_input": "2023-07-10T05:40:30.319812Z",
          "iopub.status.idle": "2023-07-10T05:40:31.61022Z",
          "shell.execute_reply.started": "2023-07-10T05:40:30.319773Z",
          "shell.execute_reply": "2023-07-10T05:40:31.609008Z"
        },
        "trusted": true,
        "id": "c65lQgs3eKde"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:40:40.257004Z",
          "iopub.execute_input": "2023-07-10T05:40:40.257469Z",
          "iopub.status.idle": "2023-07-10T05:40:40.266372Z",
          "shell.execute_reply.started": "2023-07-10T05:40:40.257432Z",
          "shell.execute_reply": "2023-07-10T05:40:40.265076Z"
        },
        "trusted": true,
        "id": "JJZrEYJ5eKde"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the models\n",
        "models = {\n",
        "    'Decision Tree': DecisionTreeRegressor(),\n",
        "    'Linear Regression': LinearRegression(),\n",
        "    'XGBoost': XGBRegressor(),\n",
        "    'Random Forest': RandomForestRegressor()\n",
        "}\n",
        "\n",
        "predictions = {}\n",
        "for model_name, model in models.items():\n",
        "    model.fit(X_train, y_train)\n",
        "    predictions[model_name] = model.predict(X_test)\n",
        "\n",
        "# Evaluate the models\n",
        "evaluation = {}\n",
        "for model_name, y_pred in predictions.items():\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    evaluation[model_name] = {'MSE': mse, 'MAE': mae}\n",
        "\n",
        "# Visualize the decision tree model using Graphviz\n",
        "dot_data = export_graphviz(models['Decision Tree'], out_file=None,\n",
        "                           feature_names=X.columns, filled=True, rounded=True,\n",
        "                           special_characters=True)\n",
        "graph = graphviz.Source(dot_data)\n",
        "\n",
        "# Display the Graphviz visualization\n",
        "graph.render(filename='decision_tree', format='png', cleanup=True)\n",
        "\n",
        "# Visualize the results\n",
        "fig = go.Figure()\n",
        "for model_name, y_pred in predictions.items():\n",
        "    fig.add_trace(go.Scatter(\n",
        "        x=y_test.index,\n",
        "        y=y_pred,\n",
        "        mode='markers',\n",
        "        name=model_name\n",
        "    ))\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=y_test.index,\n",
        "    y=y_test,\n",
        "    mode='markers',\n",
        "    name='Actual'\n",
        "))\n",
        "fig.update_layout(\n",
        "    title='Crop Yield Prediction',\n",
        "    xaxis_title='Data Point',\n",
        "    yaxis_title='Yield',\n",
        ")\n",
        "fig.show()\n",
        "\n",
        "# Display the evaluation results\n",
        "print('Evaluation Results:')\n",
        "for model_name, metrics in evaluation.items():\n",
        "    print(f'{model_name}:')\n",
        "    print(f'MSE: {metrics[\"MSE\"]}')\n",
        "    print(f'MAE: {metrics[\"MAE\"]}')\n",
        "    print('---')"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:40:45.503575Z",
          "iopub.execute_input": "2023-07-10T05:40:45.504013Z",
          "iopub.status.idle": "2023-07-10T05:40:46.374403Z",
          "shell.execute_reply.started": "2023-07-10T05:40:45.50398Z",
          "shell.execute_reply": "2023-07-10T05:40:46.373139Z"
        },
        "trusted": true,
        "id": "XUA_t5qLeKde"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <div style=\"color:white;display: inline-block;border-radius:5px;background-color:#9DCDD1;font-family:Nexa;overflow:hidden\"><p style=\"padding:20px;color:white;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0\"><b> |</b> The graphviz</p></div>\n",
        "\n"
      ],
      "metadata": {
        "id": "fzHyYxBeeKdf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import graphviz\n",
        "from IPython.display import Image, display\n",
        "\n",
        "# Create a Graphviz object from the dot file\n",
        "graph = graphviz.Source(dot_data)\n",
        "\n",
        "# Set the format and filename to save the image\n",
        "image_format = 'png'\n",
        "image_filename = 'graph'\n",
        "\n",
        "# Save the Graphviz visualization as an image\n",
        "graph.format = image_format\n",
        "graph.render(filename=image_filename, format=image_format, cleanup=True)\n",
        "\n",
        "# Display the image with a specific size\n",
        "image_path = f'{image_filename}.{image_format}'\n",
        "display(Image(filename=image_path, width=1000, height=800))\n"
      ],
      "metadata": {
        "_kg_hide-input": false,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:40:57.155229Z",
          "iopub.execute_input": "2023-07-10T05:40:57.155669Z",
          "iopub.status.idle": "2023-07-10T05:40:57.593938Z",
          "shell.execute_reply.started": "2023-07-10T05:40:57.155636Z",
          "shell.execute_reply": "2023-07-10T05:40:57.592847Z"
        },
        "trusted": true,
        "id": "e8E8JeLAeKdf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Large graphviz on this part"
      ],
      "metadata": {
        "id": "HYSOrUaLeKdf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import graphviz\n",
        "from IPython.display import display\n",
        "\n",
        "# Create a Graphviz object from the dot file\n",
        "graph = graphviz.Source(dot_data)\n",
        "\n",
        "# Display the graph\n",
        "display(graph)\n"
      ],
      "metadata": {
        "_kg_hide-input": true,
        "_kg_hide-output": true,
        "execution": {
          "iopub.status.busy": "2023-07-10T05:41:06.012208Z",
          "iopub.execute_input": "2023-07-10T05:41:06.012642Z",
          "iopub.status.idle": "2023-07-10T05:41:06.063284Z",
          "shell.execute_reply.started": "2023-07-10T05:41:06.012609Z",
          "shell.execute_reply": "2023-07-10T05:41:06.062226Z"
        },
        "trusted": true,
        "id": "GsA3XG5feKdf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div class=\"alert alert-block alert-info\"> üìå \"Hey there! Your positive feedback and support for my notebook mean the world to me! It motivates me to create more valuable content. If you can spare a moment to give it an upvote, it would help others discover and benefit from it too. Together, let's foster a vibrant community of knowledge-sharing and empowerment. Thank you for considering it, and continued success on your learning journey!\"üòÉ</div>"
      ],
      "metadata": {
        "id": "ii42D2i0eKdf"
      }
    }
  ]
}